name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.7.17'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    - checkout: self
    - script: ls -la $(System.DefaultWorkingDirectory)/terraform/environments/test
    #displayName: 'List files in Terraform directory'
    # Install Terraform on the pipeline agent 
    # Install Azure CLI on the pipeline agent 
    - task: Bash@3
      displayName: 'Install Azure CLI'
      inputs:
        targetType: 'inline'
        script: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - task: Bash@3
      displayName: 'Terrafom installation'
      inputs:
        targetType: 'inline'
        script: |
          sudo apt-get update
          sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install terraform
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: Bash@3
      displayName: 'Terrafom init'
      inputs:
        targetType: 'inline'
        script: |
          cd $(System.DefaultWorkingDirectory)/terraform/environments/test
          terraform init
        # provider: 'azurerm'
        # command: 'init'
        # workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        # backendServiceArm: '$(azureServiceConnectionId)'
        # backendAzureRmResourceGroupName: 'Azuredevops'
        # backendAzureRmStorageAccountName: 'tfstate21172'
        # backendAzureRmContainerName: 'tfstate'
        # backendAzureRmKey: 'test.terraform.tfstate'
        

    # Run Terraform Validate    
    - task: Bash@3
      displayName: Terraform validate
      inputs:
        # provider: 'azurerm'
        # command: 'validate'
        targetType: 'inline'
        script: |
          terraform validate $(System.DefaultWorkingDirectory)/terraform/environments/test

    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: Bash@3
      displayName: Terraform apply
      inputs:
        targetType: 'inline'
        script: |
          terraform apply -auto-approve $(System.DefaultWorkingDirectory)/terraform/environments/test
        # provider: 'azurerm'
        # command: 'apply'
        # workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        # environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Destroy the resources in Azure
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: Bash@3
      displayName: Terraform destroy
      inputs:
        targetType: 'inline'
        script: |
          terraform destroy -auto-approve $(System.DefaultWorkingDirectory)/terraform/environments/test
        # provider: 'azurerm'
        # command: 'destroy'
        # workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        # environmentServiceNameAzureRM: '$(azureServiceConnectionId)'        